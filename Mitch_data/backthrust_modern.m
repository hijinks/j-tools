function [stats, gs_cell] = backthrust_modern(varargin)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [VARNAME3,VARNAME7,VARNAME11,VARNAME15,VARNAME19,VARNAME23,VARNAME27,VARNAME31,VARNAME35,VARNAME39,VARNAME43,VARNAME47,VARNAME51,VARNAME55,VARNAME59,VARNAME63,VARNAME67,VARNAME71,VARNAME75]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [VARNAME3,VARNAME7,VARNAME11,VARNAME15,VARNAME19,VARNAME23,VARNAME27,VARNAME31,VARNAME35,VARNAME39,VARNAME43,VARNAME47,VARNAME51,VARNAME55,VARNAME59,VARNAME63,VARNAME67,VARNAME71,VARNAME75]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [VarName3,VarName7,VarName11,VarName15,VarName19,VarName23,VarName27,VarName31,VarName35,VarName39,VarName43,VarName47,VarName51,VarName55,VarName59,VarName63,VarName67,VarName71,VarName75] = importfile('Backthrust_canyon_gs.csv',14, 2614);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/10/19 11:01:43

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 14;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%*s%*s%*s%s%[^\n\r]';

%% Open the text file.
filename = './Mitch_data/Backthrust_canyon_gs.csv';
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
VarName3 = cell2mat(raw(:, 1));
VarName7 = cell2mat(raw(:, 2));
VarName11 = cell2mat(raw(:, 3));
VarName15 = cell2mat(raw(:, 4));
VarName19 = cell2mat(raw(:, 5));
VarName23 = cell2mat(raw(:, 6));
VarName27 = cell2mat(raw(:, 7));
VarName31 = cell2mat(raw(:, 8));
VarName35 = cell2mat(raw(:, 9));
VarName39 = cell2mat(raw(:, 10));
VarName43 = cell2mat(raw(:, 11));
VarName47 = cell2mat(raw(:, 12));
VarName51 = cell2mat(raw(:, 13));
VarName55 = cell2mat(raw(:, 14));
VarName59 = cell2mat(raw(:, 15));
VarName63 = cell2mat(raw(:, 16));
VarName67 = cell2mat(raw(:, 17));
VarName71 = cell2mat(raw(:, 18));
VarName75 = cell2mat(raw(:, 19));

gs = [VarName3,VarName7,VarName11,VarName15,VarName19,VarName23,VarName27,VarName31,VarName35,VarName39,VarName43,VarName47,VarName51,VarName55,VarName59,VarName63,VarName67,VarName71,VarName75];

gs_s = size(gs);
gs_cell = cell(gs_s(2),3);
max = 1;
stats = struct();

w = [];
means = [];
d84s = [];
d50s = [];
stdevs = [];
cvs = [];

wolmans = {};
sss = {};

for l=1:gs_s(2)
    c = gs(:,l);
    c(isnan(c(:,1)),:)=[];
    m = mean(c);
    d50 = prctile(c, 50);
    d84 = prctile(c, 84);
    stdev = std(c);
    cv_mean = stdev/m;
    
    w = [w;c];
    sorted_data = sort(c);
    ss_data = arrayfun(@(x)((x-m)/stdev),sorted_data);

    if length(c) > max
       max = length(c); 
    end
    gs_cell{l,2} = c;
    
    means = [means,m];
    d84s = [d84s,d84];
    d50s = [d50s,d50];
    stdevs = [stdevs,stdev];
    cvs = [cvs,cv_mean];
    wolmans = [wolmans, c];
    sss = [sss, ss_data];
end

stats.name = 'Modern';
stats.d84 = d84s;
stats.d50 = d50s;
stats.mean = means;
stats.stdev = stdevs;
stats.wolmans = wolmans;
stats.cv_mean = cvs;
stats.ss = sss;